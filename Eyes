import mne
import numpy as np
from scipy.signal import welch
from mne.datasets import eegbci

# Step 1: Load data (example for subject 1, runs 1 and 2)
subject = 1
runs = [1, 2]  # Eyes open/closed

# Download and load raw data
raws = []
for run in runs:
    raw = eegbci.load_data(subject, runs=[run])[0]
    raw = mne.io.read_raw_edf(raw, preload=True)
    raws.append(raw)

# Concatenate runs
raw = mne.concatenate_raws(raws)

# Step 2: Define frequency bands for feature extraction
freq_bands = {
    'delta': (1, 4),
    'theta': (4, 8),
    'alpha': (8, 13),
    'beta': (13, 30),
    'gamma': (30, 45),
}

# Step 3: Create epochs (2-second non-overlapping windows)
epochs = mne.make_fixed_length_epochs(raw, duration=2., preload=True)

# Step 4: Extract band power features for each epoch and channel
sfreq = raw.info['sfreq']  # Sampling frequency
features = []

for epoch in epochs.get_data():
    epoch_features = []
    for band, (fmin, fmax) in freq_bands.items():
        # Calculate power spectral density (PSD)
        freqs, psd = welch(epoch, sfreq, nperseg=sfreq*2)
        # Band power: average PSD within freq band
        band_power = psd[:, (freqs >= fmin) & (freqs <= fmax)].mean(axis=1)
        epoch_features.extend(band_power)
    features.append(epoch_features)

features = np.array(features)

# Step 5: Create labels array (1 for run 1, 2 for run 2)
labels = np.array([1 if i < len(epochs)//2 else 2 for i in range(len(epochs))])

print("Data shape:", features.shape)
print("Labels shape:", labels.shape)

# Step 6: Save features and labels for training later
np.save('features.npy', features)
np.save('labels.npy', labels)
print("Features and labels saved.")

